{"version":3,"sources":["components/Filter/Filter.module.css","app/contacts/contact-action.js","app/contacts/contacts-selector.js","components/ContactList/ContactList.js","components/Form/FormEditor.js","components/Filter/Filter.js","App.js","app/contacts/contact-reducer.js","app/store.js","index.js","components/Form/FormEditor.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","contactsAction","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeContact","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","ContactList","useSelector","dispatch","useDispatch","className","s","wrapper","list","map","item","text","type","btn","onClick","FormEditor","useState","setName","setNumber","handleChange","event","target","value","clearForm","onSubmit","e","preventDefault","alert","form","title","htmlFor","pattern","required","onChange","input","Filter","label","App","createReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ae4c1e94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__343fa\",\"label\":\"Filter_label__39uMe\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeContact = createAction('contacts/changeContacts');\r\nconst contactsAction = { addContact, deleteContact, changeContact };\r\nexport default contactsAction;\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import React from 'react';\r\nimport s from './ContactList.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsAction from '../../app/contacts/contact-action';\r\nimport { getVisibleContacts } from '../../app/contacts/contacts-selector';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <ul className={s.list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li key={id} className={s.item}>\r\n            <p className={s.text}>\r\n              {name}: {number}\r\n            </p>\r\n            <button\r\n              type=\"button\"\r\n              className={s.btn}\r\n              onClick={() => dispatch(contactsAction.deleteContact(id))}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport s from './FormEditor.module.css';\r\nimport contactsAction from '../../app/contacts/contact-action';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts } from '../../app/contacts/contacts-selector';\r\nexport default function FormEditor() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    contacts.map(contact => contact.name).includes(name)\r\n      ? alert(`${name} is already in contacts`)\r\n      : dispatch(contactsAction.addContact({ name, number }));\r\n    clearForm();\r\n  };\r\n  const clearForm = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit} className={s.form}>\r\n      <label className={s.title} htmlFor=\"user-name\">\r\n        Name\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={handleChange}\r\n        value={name}\r\n        id=\"user-name\"\r\n        className={s.input}\r\n      />\r\n\r\n      <label className={s.title} htmlFor=\"user-number\">\r\n        Number\r\n      </label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        onChange={handleChange}\r\n        value={number}\r\n        id=\"user-number\"\r\n        className={s.input}\r\n      />\r\n\r\n      <button type=\"submit\" className={s.btn}>\r\n        Add Contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsAction from '../../app/contacts/contact-action';\r\nimport { getFilter } from '../../app/contacts/contacts-selector';\r\nimport s from './Filter.module.css';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.label}>\r\n      Фильтр по имени\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => dispatch(contactsAction.changeContact(e.target.value))}\r\n        className={s.input}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","// import { useState} from 'react';\r\nimport './App.css';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport initialContacts from './components/ContactList/contacts.json';\r\nimport FormEditor from 'components/Form/FormEditor';\r\nimport Filter from 'components/Filter/Filter';\r\nimport { useLocalStorage } from 'hooks/useLocalStorage';\r\nexport default function App() {\r\n  // const addContact = ({ name, number }) => {\r\n  //   const contact = {\r\n  //     id: uuidv4(),\r\n  //     name,\r\n  //     number,\r\n  //   };\r\n  //   if (verifyNewContact(name)) {\r\n  //     setContacts(prevState => [contact, ...prevState]);\r\n  //   }\r\n  // };\r\n  // const verifyNewContact = newName => {\r\n  //   let verify = true;\r\n  //   contacts.forEach(({ name }) => {\r\n  //     if (name.toLowerCase() === newName.toLowerCase()) {\r\n  //       alert(`${name} is already in contacts`);\r\n  //       verify = false;\r\n  //     }\r\n  //   });\r\n  //   return verify;\r\n  // };\r\n  // const deleteContact = contactId => {\r\n  //   setContacts(contacts =>\r\n  //     contacts.filter(contact => contact.id !== contactId),\r\n  //   );\r\n  // };\r\n  // const changeFilter = e => {\r\n  //   setFilter(e.currentTarget.value);\r\n  // };\r\n\r\n  // const getVisibleContact = () => {\r\n  //   const nomalizedFilter = filter.toLowerCase().trim();\r\n  //   return contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(nomalizedFilter),\r\n  //   );\r\n  // };\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <h2 className=\"title\">Phonebook</h2>\r\n      <FormEditor />\r\n      <h2 className=\"title\">Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport contactsAction from './contact-action';\r\nconst items = createReducer([], {\r\n  [contactsAction.addContact]: (state, { payload }) => [...state, payload],\r\n  [contactsAction.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\nconst filter = createReducer('', {\r\n  [contactsAction.changeContact]: (state, { payload }) => payload,\r\n});\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactReducer from './contacts/contact-reducer';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\nconst persistConfig = {\r\n  key: 'contactValue',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer:{\r\ncontacts: persistReducer(persistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\nconst persistor = persistStore(store);\r\nexport default { store, persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n    <PersistGate loading={null} persistor={store.persistor}>\r\n      <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"FormEditor_title__K0epb\",\"form\":\"FormEditor_form__3kPMc\",\"btn\":\"FormEditor_btn__3yKDG\",\"input\":\"FormEditor_input__WXf2p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1x5YZ\",\"item\":\"ContactList_item__rDZF4\",\"btn\":\"ContactList_btn__22IZf\",\"text\":\"ContactList_text__kLd1x\",\"title\":\"ContactList_title__3FzC2\"};"],"sourceRoot":""}